from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Property, District, Contact, PropertyContact, Photo
import os
from telebot import types
from keyboards import create_main_menu_keyboard, create_budget_keyboard, get_keyboard_by_step

STEPS = ['district', 'room', 'area', 'budget']
STEP_MESSAGES = {
    'district': "–í–∏–±–æ—Ä—É —Ä–∞–π–æ–Ω—É üìç",
    'room': "–í–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç üîë",
    'area': "–í–≤–µ–¥–µ–Ω–Ω—è –ø–ª–æ—â—ñ üìê",
    'budget': "–í–∏–±–æ—Ä—É –±—é–¥–∂–µ—Ç—É üíµ"
}

engine = create_engine('sqlite:///properties.db')
Session = sessionmaker(bind=engine)


def filter_properties(session, user_data):
    query = session.query(Property)
    print(f"–§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¥–∞–Ω–∏–º–∏: {user_data}")

    for key in ['district', 'room', 'area', 'budget']:
        if key in user_data:
            filter_value = user_data[key]
            query = apply_filters(query, key, filter_value)
            print(f"–î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ {key}: {filter_value}")
            print(f"–ü–æ—Ç–æ—á–Ω–∏–π SQL –∑–∞–ø–∏—Ç: {query}")

    filtered_properties = query.all()
    print(f"–ó–Ω–∞–π–¥–µ–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: {filtered_properties}")
    return filtered_properties


def apply_filters(query, filter_name, filter_value):
    filter_value = filter_value.strip()

    filters = {
        'district': lambda: query.join(District).filter(District.district_name.ilike(f"%{filter_value}%")),
        'room': lambda: query.filter(Property.rooms == int(filter_value)),
        'area': lambda: handle_area_filter(query, filter_value),
        'budget': lambda: handle_budget_filter(query, filter_value)
    }

    return filters.get(filter_name, lambda: query)()


def handle_area_filter(query, filter_value):
    try:
        if '–¥–æ ' in filter_value:
            max_area = float(filter_value.replace("–¥–æ ", "").replace(",", "").strip())
            return query.filter(Property.area <= max_area)
        elif '–≤—ñ–¥ ' in filter_value:
            min_area = float(filter_value.replace("–≤—ñ–¥ ", "").replace(",", "").strip())
            return query.filter(Property.area >= min_area)
        else:
            max_area = float(filter_value)
            return query.filter(Property.area <= max_area)
    except ValueError:
        return query


def handle_budget_filter(query, filter_value):
    try:
        if '–¥–æ ' in filter_value:
            max_budget = float(filter_value.replace("–¥–æ ", "").replace(",", "").strip())
            return query.filter(Property.budget <= max_budget)
        elif '–≤—ñ–¥ ' in filter_value:
            min_budget = float(filter_value.replace("–≤—ñ–¥ ", "").strip())
            return query.filter(Property.budget >= min_budget)
        else:
            max_budget = float(filter_value)
            return query.filter(Property.budget <= max_budget)
    except ValueError:
        return query


def get_prev_step(chat_id, user_data):
    current_index = STEPS.index(user_data[chat_id]['current_step'])
    return STEPS[max(0, current_index - 1)]


def send_filtered_properties(bot, chat_id, filtered_properties, session):
    if not filtered_properties:
        bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚òπÔ∏è",
                         reply_markup=create_main_menu_keyboard())
        return

    for prop in filtered_properties:
        contact_query = session.query(Contact.phone_number).join(PropertyContact).filter(
            PropertyContact.property_id == prop.property_id)
        contact_number = contact_query.first().phone_number if contact_query.count() > 0 else "–ù–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"

        caption = (f"üìù –û–ø–∏—Å: {prop.description}\n"
                   f"üìç –†–∞–π–æ–Ω: {prop.district.district_name}\n"
                   f"üîë –ö—ñ–º–Ω–∞—Ç: {prop.rooms}\n"
                   f"üìê –ü–ª–æ—â–∞: {prop.area} –∫–≤.–º\n"
                   f"üíµ –ë—é–¥–∂–µ—Ç: {prop.budget} $\n"
                   f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {contact_number}\n")

        photos = prop.photos if prop.photos else []
        files = []
        media_group = []

        try:
            for index, photo in enumerate(photos):
                photo_path = getattr(photo, 'photo_path', None)
                if photo_path and os.path.exists(photo_path):
                    file = open(photo_path, 'rb')
                    files.append(file)
                    if index == 0:
                        media_group.append(types.InputMediaPhoto(file, caption=caption))
                    else:
                        media_group.append(types.InputMediaPhoto(file))
                else:
                    bot.send_message(chat_id, "[–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ ‚òπÔ∏è]")

            if media_group:
                bot.send_media_group(chat_id, media=media_group)
        finally:
            for file in files:
                file.close()

    bot.send_message(
        chat_id,
        "‚úÖ –¶–µ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.",
        reply_markup=create_main_menu_keyboard()
    )


def handle_choice(bot, chat_id, data, message_id, user_data):
    ensure_user_data(chat_id, user_data)
    current_step = user_data[chat_id]['current_step']
    selection = data.split('_')[1]
    user_data[chat_id][current_step] = selection

    emoji_mapping = {
        'district': 'üìç',
        'room': 'üîë',
        'area': 'üìê',
        'budget': 'üíµ'
    }

    step_messages = {
        'district': "–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –∫—ñ–º–Ω–∞—Ç –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ üîë",
        'room': "–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –ø–ª–æ—â—É –ø–æ–º–µ—à–∫–∞–Ω–Ω—è, —è–∫–∞ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ üìê\n\n"
                "üî¥ –ü—Ä–∏–º—ñ—Ç–∫–∞: –í–≤–µ–¥—ñ—Ç—å –ø–ª–æ—â—É —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º, —ñ –±–æ—Ç –ø—ñ–¥–±–µ—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑ —Ç–∞–∫–æ—é –∂ –∞–±–æ –º–µ–Ω—à–æ—é –ø–ª–æ—â–µ—é.",
        'area': "–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –í–∞—à –±—é–¥–∂–µ—Ç üíµ"
    }

    room_messages = {
        '1': '1 –∫—ñ–º–Ω–∞—Ç–∞',
        '2': '2 –∫—ñ–º–Ω–∞—Ç–∏',
        '3': '3 –∫—ñ–º–Ω–∞—Ç–∏',
        '4': '4 –∫—ñ–º–Ω–∞—Ç–∏'
    }

    selected_message = room_messages.get(selection, selection)

    next_step_index = STEPS.index(current_step) + 1
    if next_step_index < len(STEPS):
        next_step = STEPS[next_step_index]
        user_data[chat_id]['current_step'] = next_step

        emoji = emoji_mapping.get(current_step, '')
        next_step_message = step_messages.get(current_step, STEP_MESSAGES[next_step])

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–í–∏–±—Ä–∞–Ω–æ: {selected_message} {emoji}\n{next_step_message}",
            reply_markup=get_keyboard_by_step(next_step) if next_step in ['district', 'room', 'budget'] else None
        )
    else:
        session = Session()
        filtered_properties = filter_properties(session, user_data[chat_id])
        send_filtered_properties(bot, chat_id, filtered_properties, session)
        session.close()


def ensure_user_data(chat_id, user_data):
    if chat_id not in user_data:
        user_data[chat_id] = {'current_step': 'district'}


def handle_area_step(bot, chat_id, area, user_data):
    user_data[chat_id]['area'] = area
    user_data[chat_id]['current_step'] = 'budget'
    bot.send_message(chat_id, "–ü–ª–æ—â–∞ –ø–æ–º–µ—à–∫–∞–Ω–Ω—è –≤–∫–∞–∑–∞–Ω–∞ üìê\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –í–∞—à –±—é–¥–∂–µ—Ç üíµ",
                     reply_markup=create_budget_keyboard())
